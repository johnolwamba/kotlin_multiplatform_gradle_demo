
buildscript {
    ext.kotlin_version = '1.2.20'

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
    }
}

apply plugin: 'kotlin-platform-common'

/* Make a list of submodules organized by platform. */
def fmtMods = { mods -> mods.collect { it.toString().substring(8) }.join(', ') }
project.ext {
    common_submods = subprojects.findAll {
        !it.name.endsWith('jvm') && !it.name.endsWith('js') // && !it.name.endsWith('-native')
    }
    println("common submodules ${fmtMods(common_submods)}")
    jvm_submods = subprojects.findAll {
        it.name.endsWith('jvm')
    }
    println("JVM submodules: ${fmtMods(jvm_submods)}")
    js_submods = subprojects.findAll {
        it.name.endsWith('js')
    }
    println("javascript submodules: ${fmtMods(js_submods)}")
}

/* All the projects (including this top-level one). */
allprojects {
    group 'demo'
    version '1.0.0'

    repositories {
        mavenCentral()
    }

    /* Merge all the build directories into one. */
    buildDir = rootProject.file('build')
}

/* All the subprojects (but not this top-level one, which contains no code). */
configure(subprojects) {
//    repositories {
//        mavenCentral()
//    }
}

/* All the common subprojects (including this top-level one), but no platform projects. */
configure(common_submods) {
    apply plugin: 'kotlin-platform-common'

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
    }
}

/* All JVM platform subprojects. */
configure(jvm_submods) {
    apply plugin: 'kotlin-platform-jvm'

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        testCompile 'junit:junit:4.12'
        testCompile 'org.hamcrest:hamcrest-core:1.3'
        testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    }
}

/* All javascript platform subprojects. */
configure(js_submods) {
    apply plugin: 'kotlin-platform-js'
    apply plugin: 'com.moowork.node'

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
    }

    ext.jsTargetDir = file("${buildDir.path}/js")

    compileKotlin2Js {
        kotlinOptions {
            outputFile = file("${jsTargetDir}/${project.name}.js")
            moduleKind = "umd"
            sourceMap = true
            metaInfo = true
        }
    }

    compileTestKotlin2Js {
        kotlinOptions {
            moduleKind = "umd"
            sourceMap = true
            metaInfo = true
            outputFile = file("${jsTargetDir}/test_${project.name}.js")
        }
    }

    /* Make sure node and npm are available for running code and tests. */
    node {
        download = true
        version = '9.4.0'
        npmVersion = '5.6.0'
        nodeModulesDir = buildDir
    }

    /* Install the Kotlin javascript files and copy them to the output folder. */
    task installKotlinJs(type: NpmTask) {
      args = ['install', '--silent', 'kotlin', 'kotlin-test']
    }
    def kotlinJsFiles = [
        file("${buildDir.path}/node_modules/kotlin/kotlin.js"),
        file("${buildDir.path}/node_modules/kotlin/kotlin.meta.js"),
        file("${buildDir.path}/node_modules/kotlin-test/kotlin-test.js"),
        file("${buildDir.path}/node_modules/kotlin-test/kotlin-test.meta.js")
    ]
    task copyKotlinJs(type: Copy) {
        dependsOn installKotlinJs
        from kotlinJsFiles
        into file("${jsTargetDir.path}")
    }
    copyKotlinJs.doFirst {
        kotlinJsFiles.forEach { assert it.exists() }
    }
    copyKotlinJs.dependsOn assemble
    build.dependsOn copyKotlinJs

    //TODO: Make sure this is only called once:
    installKotlinJs.doLast {
        println("************************************")
        println("* INSTALL NPM MODULE KOTLIN(-TEST) *")
        println("************************************")
    }

    tasks.withType(NodeTask) {
        /* Make all node tasks have the correct path to find sources. */
        environment NODE_PATH: jsTargetDir.path
    }

    /* Install QUnit for running tests and run it when testing. */
    task installQunit(type: NpmTask) {
        args = ['install', '--silent', 'qunit']
    }
    def testsFile = file(compileTestKotlin2Js.outputFile)
    def testsFileRelPath = jsTargetDir.toPath().relativize(testsFile.toPath())
    task runQunit(type: NodeTask) {
        dependsOn compileTestKotlin2Js
        dependsOn copyKotlinJs
        dependsOn installQunit
        workingDir = jsTargetDir
        script = file("${buildDir.path}/node_modules/qunit/bin/qunit")
        args = ['--seed', '1', testsFileRelPath]
    }
    runQunit.doFirst {
        assert testsFile.exists()
        println("run ${testsFileRelPath} with qunit")
    }
    test.dependsOn runQunit
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4.1'
}

dependencies {
    compile project(":alpha")
}


