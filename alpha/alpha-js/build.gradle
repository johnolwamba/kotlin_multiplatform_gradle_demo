
buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
    }
}

apply plugin: 'com.moowork.node'

dependencies {
    expectedBy project(":alpha")
    compile project(":beta:beta-js")
    compile project(":gamma:gamma-js")
}

/* Make sure node and npm are available for running code and tests. */
node {
    download = true
    version = '9.4.0'
    npmVersion = '5.6.0'
    nodeModulesDir = buildDir
}

/* Install the Kotlin javascript files and copy them to the output folder. */
task installKotlinJs(type: NpmTask) {
  args = ['install', '--silent', 'kotlin', 'kotlin-test']
}
def kotlinJsFiles = [
    file("${buildDir.path}/node_modules/kotlin/kotlin.js"),
    file("${buildDir.path}/node_modules/kotlin/kotlin.meta.js"),
    file("${buildDir.path}/node_modules/kotlin-test/kotlin-test.js"),
    file("${buildDir.path}/node_modules/kotlin-test/kotlin-test.meta.js")
]
task copyKotlinJs(type: Copy) {
    dependsOn installKotlinJs
    from kotlinJsFiles
    into file("${jsTargetDir.path}")
}
copyKotlinJs.doFirst {
    kotlinJsFiles.forEach { assert it.exists() }
}
tasks.withType(NodeTask) {
    /* Make all node tasks have the correct path to find sources. */
    environment NODE_PATH: jsTargetDir.path
}
copyKotlinJs.dependsOn assemble
build.dependsOn copyKotlinJs

/* Install QUnit for running tests and run it when testing. */
task installQunit(type: NpmTask) {
    args = ['install', '--silent', 'qunit']
}
def testsFile = file(compileTestKotlin2Js.outputFile)
def testsFileRelPath = jsTargetDir.toPath().relativize(testsFile.toPath())
task runQunit(type: NodeTask) {
    dependsOn compileTestKotlin2Js
    dependsOn copyKotlinJs
    dependsOn installQunit
    workingDir = jsTargetDir
    script = file("${buildDir.path}/node_modules/qunit/bin/qunit")
    args = ['--seed', '1', testsFileRelPath]
}
runQunit.doFirst {
    assert testsFile.exists()
    println("run ${testsFileRelPath} with qunit")
}
test.dependsOn runQunit

/* Create a task that runs the alpha project when invoked. */
def runFile = file("${jsTargetDir.path}/${project.name}.js")
task run(type: NodeTask) {
    description = "Run the Javascript code using NodeJS (no browser)"
    dependsOn build
    script = runFile
}
run.doFirst {
    assert runFile.exists()
    println("run ${runFile.path} with node")
}


